# Generated by Django 4.2.9 on 2024-01-27 12:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("surname", models.CharField(max_length=200)),
                ("email", models.EmailField(max_length=254)),
                ("score", models.IntegerField(default=0)),
                ("art_score", models.IntegerField(default=0)),
                ("iq_score", models.IntegerField(default=0)),
                ("culture_score", models.IntegerField(default=0)),
                ("attempts", models.IntegerField(default=0)),
                ("informatica_score", models.IntegerField(default=0)),
                ("ciencia_score", models.IntegerField(default=0)),
                ("geopolitica_score", models.IntegerField(default=0)),
                ("curiosidades_score", models.IntegerField(default=0)),
                ("espiritualidad_score", models.IntegerField(default=0)),
                ("historia_score", models.IntegerField(default=0)),
                ("sociedad_points", models.IntegerField(default=0)),
                ("sociedad_actual_score", models.IntegerField(default=0)),
                ("sociedad_last_score", models.IntegerField(default=0)),
                ("sociedad_test_score", models.IntegerField(default=0)),
                ("sociedad_test_message", models.CharField(max_length=100)),
                ("art_actual_score", models.IntegerField(default=0)),
                ("art_last_score", models.IntegerField(default=0)),
                ("art_test_message", models.CharField(max_length=100)),
                ("art_attempts", models.IntegerField(default=2)),
                ("iq_attempts", models.IntegerField(default=2)),
                ("culture_attempts", models.IntegerField(default=2)),
                ("art_success", models.IntegerField(default=0)),
                ("art_errors", models.IntegerField(default=0)),
                ("round", models.IntegerField(default=0)),
                ("art_test_score", models.IntegerField(default=0)),
                ("initial_score", models.IntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BaseQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                (
                    "correct_option",
                    models.CharField(
                        choices=[
                            ("A", "Option A"),
                            ("B", "Option B"),
                            ("C", "Option C"),
                        ],
                        max_length=1,
                    ),
                ),
                ("nivel_dificultad", models.IntegerField()),
                ("category", models.CharField(max_length=200)),
                ("points", models.IntegerField()),
                ("option_a", models.CharField(max_length=255, null=True)),
                ("option_b", models.CharField(max_length=255, null=True)),
                ("option_c", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Cuadro",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cuadro", models.CharField(max_length=500)),
                ("autor", models.CharField(max_length=200)),
                ("year", models.CharField(max_length=10)),
                ("description", models.CharField(max_length=10000)),
                ("option_a", models.CharField(max_length=200)),
                ("option_b", models.CharField(max_length=200)),
                ("option_c", models.CharField(max_length=200)),
                ("image", models.CharField(max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name="Puntuacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("puntos", models.IntegerField()),
                (
                    "pregunta",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="culturizateApp.basequestion",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
